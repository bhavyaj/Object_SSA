digraph "DirectedGraph" {
graph [concentrate = true];center=true;fontsize=6;node [ color=blue,shape="box"fontsize=6,fontcolor=black,fontname=Arial];edge [ color=black,fontsize=6,fontcolor=black,fontname=Arial]; 
   "BB0 (en)\n\n" [ ]
   "BB1\n" [ ]
   "BB2\n           v14 = phi  v11,v3:#0.0\l           v15 = phi  v13,v4:#0\l6   conditional branch(ge) v15,v5:#3\l" [ ]
   "BB3\n9   v6 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" [ ]
   "BB4\n11   v7 = arrayload v6[v15]        \l" [ ]
   "BB5\n13   v8 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" [ ]
   "BB6\n15   v9 = arrayload v8[v15]        \l" [ ]
   "BB7\n16   v10 = binaryop(mul) v7 , v9   \l17   v11 = binaryop(add) v14 , v10 \l21   v13 = binaryop(add) v15 , v12:#1\l23   goto                          \l" [ ]
   "BB8\n25   return v14                    \l" [ ]
   "BB9 (ex)\n\n" [ ]
 "BB0 (en)\n\n" -> "BB1\n" 
 "BB1\n" -> "BB2\n           v14 = phi  v11,v3:#0.0\l           v15 = phi  v13,v4:#0\l6   conditional branch(ge) v15,v5:#3\l" 
 "BB2\n           v14 = phi  v11,v3:#0.0\l           v15 = phi  v13,v4:#0\l6   conditional branch(ge) v15,v5:#3\l" -> "BB3\n9   v6 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" 
 "BB2\n           v14 = phi  v11,v3:#0.0\l           v15 = phi  v13,v4:#0\l6   conditional branch(ge) v15,v5:#3\l" -> "BB8\n25   return v14                    \l" 
 "BB3\n9   v6 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" -> "BB4\n11   v7 = arrayload v6[v15]        \l" 
 "BB4\n11   v7 = arrayload v6[v15]        \l" -> "BB5\n13   v8 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" 
 "BB5\n13   v8 = getfield < Application, LMathVector, data, <Primordial,[D> > v1\l" -> "BB6\n15   v9 = arrayload v8[v15]        \l" 
 "BB6\n15   v9 = arrayload v8[v15]        \l" -> "BB7\n16   v10 = binaryop(mul) v7 , v9   \l17   v11 = binaryop(add) v14 , v10 \l21   v13 = binaryop(add) v15 , v12:#1\l23   goto                          \l" 
 "BB7\n16   v10 = binaryop(mul) v7 , v9   \l17   v11 = binaryop(add) v14 , v10 \l21   v13 = binaryop(add) v15 , v12:#1\l23   goto                          \l" -> "BB2\n           v14 = phi  v11,v3:#0.0\l           v15 = phi  v13,v4:#0\l6   conditional branch(ge) v15,v5:#3\l" 
 "BB8\n25   return v14                    \l" -> "BB9 (ex)\n\n" 

}