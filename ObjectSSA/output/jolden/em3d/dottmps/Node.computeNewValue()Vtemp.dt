digraph "DirectedGraph" {
graph [concentrate = true];center=true;fontsize=6;node [ color=blue,shape="box"fontsize=6,fontcolor=black,fontname=Arial];edge [ color=black,fontsize=6,fontcolor=black,fontname=Arial]; 
   "BB0 (en)\n\n" [ ]
   "BB1\n" [ ]
   "BB2\n           v15 = phi  v14,v3:#0\l4   v4 = getfield < Application, LNode, fromCount, <Primordial,I> > v1\l" [ ]
   "BB3\n5   conditional branch(ge) v15,v4  \l" [ ]
   "BB4\n8   v5 = getfield < Application, LNode, value, <Primordial,D> > v1\l" [ ]
   "BB5\n10   v6 = getfield < Application, LNode, coeffs, <Primordial,[D> > v1\l" [ ]
   "BB6\n12   v7 = arrayload v6[v15]        \l" [ ]
   "BB7\n14   v8 = getfield < Application, LNode, fromNodes, <Application,[LNode> > v1\l" [ ]
   "BB8\n16   v9 = arrayload v8[v15]        \l" [ ]
   "BB9\n17   v10 = getfield < Application, LNode, value, <Primordial,D> > v9\l" [ ]
   "BB10\n18   v11 = binaryop(mul) v7 , v10  \l19   v12 = binaryop(sub) v5 , v11  \l20   putfield v1 = v12 < Application, LNode, value, <Primordial,D> >\l" [ ]
   "BB11\n23   v14 = binaryop(add) v15 , v13:#1\l25   goto                          \l" [ ]
   "BB12\n26   return                        \l" [ ]
   "BB13 (ex)\n\n" [ ]
 "BB0 (en)\n\n" -> "BB1\n" 
 "BB1\n" -> "BB2\n           v15 = phi  v14,v3:#0\l4   v4 = getfield < Application, LNode, fromCount, <Primordial,I> > v1\l" 
 "BB2\n           v15 = phi  v14,v3:#0\l4   v4 = getfield < Application, LNode, fromCount, <Primordial,I> > v1\l" -> "BB3\n5   conditional branch(ge) v15,v4  \l" 
 "BB3\n5   conditional branch(ge) v15,v4  \l" -> "BB4\n8   v5 = getfield < Application, LNode, value, <Primordial,D> > v1\l" 
 "BB3\n5   conditional branch(ge) v15,v4  \l" -> "BB12\n26   return                        \l" 
 "BB4\n8   v5 = getfield < Application, LNode, value, <Primordial,D> > v1\l" -> "BB5\n10   v6 = getfield < Application, LNode, coeffs, <Primordial,[D> > v1\l" 
 "BB5\n10   v6 = getfield < Application, LNode, coeffs, <Primordial,[D> > v1\l" -> "BB6\n12   v7 = arrayload v6[v15]        \l" 
 "BB6\n12   v7 = arrayload v6[v15]        \l" -> "BB7\n14   v8 = getfield < Application, LNode, fromNodes, <Application,[LNode> > v1\l" 
 "BB7\n14   v8 = getfield < Application, LNode, fromNodes, <Application,[LNode> > v1\l" -> "BB8\n16   v9 = arrayload v8[v15]        \l" 
 "BB8\n16   v9 = arrayload v8[v15]        \l" -> "BB9\n17   v10 = getfield < Application, LNode, value, <Primordial,D> > v9\l" 
 "BB9\n17   v10 = getfield < Application, LNode, value, <Primordial,D> > v9\l" -> "BB10\n18   v11 = binaryop(mul) v7 , v10  \l19   v12 = binaryop(sub) v5 , v11  \l20   putfield v1 = v12 < Application, LNode, value, <Primordial,D> >\l" 
 "BB10\n18   v11 = binaryop(mul) v7 , v10  \l19   v12 = binaryop(sub) v5 , v11  \l20   putfield v1 = v12 < Application, LNode, value, <Primordial,D> >\l" -> "BB11\n23   v14 = binaryop(add) v15 , v13:#1\l25   goto                          \l" 
 "BB11\n23   v14 = binaryop(add) v15 , v13:#1\l25   goto                          \l" -> "BB2\n           v15 = phi  v14,v3:#0\l4   v4 = getfield < Application, LNode, fromCount, <Primordial,I> > v1\l" 
 "BB12\n26   return                        \l" -> "BB13 (ex)\n\n" 

}