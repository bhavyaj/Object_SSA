digraph "DirectedGraph" {
graph [label = "Object SSA for Root.reachedLimit()Z", labelloc=t, concentrate = true];center=true;fontsize=6;node [ color=blue,shape="box"fontsize=6,fontcolor=black,fontname=Arial];edge [ color=black,fontsize=6,fontcolor=black,fontname=Arial]; 
   "BB0 (en)\n\n" [ ]
   "BB1\n1  GetOSSAInstruction:	O2_1= O1_1< D>        \l" [ ]
   "BB2\n2  GetOSSAInstruction:	4= O2_1< P>           \l" [ ]
   "BB3\n4   v6 = binaryop(div) v4 , v5:#10000.0      \l6  GetOSSAInstruction:	7= O1_1< theta_R>     \l" [ ]
   "BB4\n7   v8 = binaryop(sub) v6 , v7               \l8  O3_1 = < Application, Ljava/lang/Math, abs(D)D >( V8 )\l" [ ]
   "BB5\n10   v12 = compare v10,v11:#1.0E-5 opcode=cmpg\l12   conditional branch(ge) v12,v13:#0       \l" [ ]
   "BB6\n14  GetOSSAInstruction:	O2_1= O1_1< D>       \l" [ ]
   "BB7\n15  GetOSSAInstruction:	15= O2_1< Q>         \l" [ ]
   "BB8\n17   v16 = binaryop(div) v15 , v5:#10000.0   \l19  GetOSSAInstruction:	17= O1_1< theta_I>   \l" [ ]
   "BB9\n20   v18 = binaryop(sub) v16 , v17           \l21  O3_2 = < Application, Ljava/lang/Math, abs(D)D >( V18 )\l" [ ]
   "BB10\n23   v21 = compare v20,v11:#1.0E-5 opcode=cmpg\l25   conditional branch(ge) v21,v13:#0       \l" [ ]
   "BB11\n27   goto                                    \l" [ ]
   "BB12\n" [ ]
   "BB13\n           v23 = phi  v22:#1,v13:#0\l29  Return O3_1                              \l" [ ]
   "BB14 (ex)\n\n" [ ]
 "BB0 (en)\n\n" -> "BB1\n1  GetOSSAInstruction:	O2_1= O1_1< D>        \l" 
 "BB1\n1  GetOSSAInstruction:	O2_1= O1_1< D>        \l" -> "BB2\n2  GetOSSAInstruction:	4= O2_1< P>           \l" 
 "BB2\n2  GetOSSAInstruction:	4= O2_1< P>           \l" -> "BB3\n4   v6 = binaryop(div) v4 , v5:#10000.0      \l6  GetOSSAInstruction:	7= O1_1< theta_R>     \l" 
 "BB3\n4   v6 = binaryop(div) v4 , v5:#10000.0      \l6  GetOSSAInstruction:	7= O1_1< theta_R>     \l" -> "BB4\n7   v8 = binaryop(sub) v6 , v7               \l8  O3_1 = < Application, Ljava/lang/Math, abs(D)D >( V8 )\l" 
 "BB4\n7   v8 = binaryop(sub) v6 , v7               \l8  O3_1 = < Application, Ljava/lang/Math, abs(D)D >( V8 )\l" -> "BB5\n10   v12 = compare v10,v11:#1.0E-5 opcode=cmpg\l12   conditional branch(ge) v12,v13:#0       \l" 
 "BB5\n10   v12 = compare v10,v11:#1.0E-5 opcode=cmpg\l12   conditional branch(ge) v12,v13:#0       \l" -> "BB6\n14  GetOSSAInstruction:	O2_1= O1_1< D>       \l" 
 "BB5\n10   v12 = compare v10,v11:#1.0E-5 opcode=cmpg\l12   conditional branch(ge) v12,v13:#0       \l" -> "BB12\n" 
 "BB6\n14  GetOSSAInstruction:	O2_1= O1_1< D>       \l" -> "BB7\n15  GetOSSAInstruction:	15= O2_1< Q>         \l" 
 "BB7\n15  GetOSSAInstruction:	15= O2_1< Q>         \l" -> "BB8\n17   v16 = binaryop(div) v15 , v5:#10000.0   \l19  GetOSSAInstruction:	17= O1_1< theta_I>   \l" 
 "BB8\n17   v16 = binaryop(div) v15 , v5:#10000.0   \l19  GetOSSAInstruction:	17= O1_1< theta_I>   \l" -> "BB9\n20   v18 = binaryop(sub) v16 , v17           \l21  O3_2 = < Application, Ljava/lang/Math, abs(D)D >( V18 )\l" 
 "BB9\n20   v18 = binaryop(sub) v16 , v17           \l21  O3_2 = < Application, Ljava/lang/Math, abs(D)D >( V18 )\l" -> "BB10\n23   v21 = compare v20,v11:#1.0E-5 opcode=cmpg\l25   conditional branch(ge) v21,v13:#0       \l" 
 "BB10\n23   v21 = compare v20,v11:#1.0E-5 opcode=cmpg\l25   conditional branch(ge) v21,v13:#0       \l" -> "BB11\n27   goto                                    \l" 
 "BB10\n23   v21 = compare v20,v11:#1.0E-5 opcode=cmpg\l25   conditional branch(ge) v21,v13:#0       \l" -> "BB12\n" 
 "BB11\n27   goto                                    \l" -> "BB13\n           v23 = phi  v22:#1,v13:#0\l29  Return O3_1                              \l" 
 "BB12\n" -> "BB13\n           v23 = phi  v22:#1,v13:#0\l29  Return O3_1                              \l" 
 "BB13\n           v23 = phi  v22:#1,v13:#0\l29  Return O3_1                              \l" -> "BB14 (ex)\n\n" 

}