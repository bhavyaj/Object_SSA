digraph "DirectedGraph" {
graph [label = "Object SSA for MathVector.subtraction(LMathVector;)V", labelloc=t, concentrate = true];center=true;fontsize=6;node [ color=blue,shape="box"fontsize=6,fontcolor=black,fontname=Arial];edge [ color=black,fontsize=6,fontcolor=black,fontname=Arial]; 
   "BB0 (en)\n\n" [ ]
   "BB1\n" [ ]
   "BB2\n           v13 = phi  v12,v4:#0\l4   conditional branch(ge) v13,v5:#3         \l" [ ]
   "BB3\n6  GetOSSAInstruction:	O3_1= O1_1< data>     \l" [ ]
   "BB4\n9   v7 = arrayload v6[v13]                   \l" [ ]
   "BB5\n11  GetOSSAInstruction:	O4_1= O2_1< data>    \l" [ ]
   "BB6\n13   v9 = arrayload v8[v13]                  \l" [ ]
   "BB7\n14   v10 = binaryop(sub) v7 , v9             \l15   arraystore v6[v13] = v10                \l" [ ]
   "BB8\n18   v12 = binaryop(add) v13 , v11:#1        \l20   goto                                    \l" [ ]
   "BB9\n21  return                                   \l" [ ]
   "BB10 (ex)\n\n" [ ]
 "BB0 (en)\n\n" -> "BB1\n" 
 "BB1\n" -> "BB2\n           v13 = phi  v12,v4:#0\l4   conditional branch(ge) v13,v5:#3         \l" 
 "BB2\n           v13 = phi  v12,v4:#0\l4   conditional branch(ge) v13,v5:#3         \l" -> "BB3\n6  GetOSSAInstruction:	O3_1= O1_1< data>     \l" 
 "BB2\n           v13 = phi  v12,v4:#0\l4   conditional branch(ge) v13,v5:#3         \l" -> "BB9\n21  return                                   \l" 
 "BB3\n6  GetOSSAInstruction:	O3_1= O1_1< data>     \l" -> "BB4\n9   v7 = arrayload v6[v13]                   \l" 
 "BB4\n9   v7 = arrayload v6[v13]                   \l" -> "BB5\n11  GetOSSAInstruction:	O4_1= O2_1< data>    \l" 
 "BB5\n11  GetOSSAInstruction:	O4_1= O2_1< data>    \l" -> "BB6\n13   v9 = arrayload v8[v13]                  \l" 
 "BB6\n13   v9 = arrayload v8[v13]                  \l" -> "BB7\n14   v10 = binaryop(sub) v7 , v9             \l15   arraystore v6[v13] = v10                \l" 
 "BB7\n14   v10 = binaryop(sub) v7 , v9             \l15   arraystore v6[v13] = v10                \l" -> "BB8\n18   v12 = binaryop(add) v13 , v11:#1        \l20   goto                                    \l" 
 "BB8\n18   v12 = binaryop(add) v13 , v11:#1        \l20   goto                                    \l" -> "BB2\n           v13 = phi  v12,v4:#0\l4   conditional branch(ge) v13,v5:#3         \l" 
 "BB9\n21  return                                   \l" -> "BB10 (ex)\n\n" 

}